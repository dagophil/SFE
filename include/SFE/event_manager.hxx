#ifndef SFE_EVENT_MANAGER_HXX
#define SFE_EVENT_MANAGER_HXX

#include <vector>
#include <set>
#include <queue>
#include <map>
#include <functional>

namespace sfe
{
    class EventManager;

    typedef std::string Event;

    ////////////////////////////////////////////////////////////
    /// Event listener that can react to events.
    ////////////////////////////////////////////////////////////
    class Listener
    {
    public:

        ////////////////////////////////////////////////////////////
        /// The callback function type.
        ////////////////////////////////////////////////////////////
        typedef std::function<void(Event const &)> Callback;

        ////////////////////////////////////////////////////////////
        /// Create a listener that uses the given callback.
        ////////////////////////////////////////////////////////////
        Listener(Callback f);

        ////////////////////////////////////////////////////////////
        /// The destructor unregisters the listener from its event
        /// managers.
        ////////////////////////////////////////////////////////////
        virtual ~Listener();

        ////////////////////////////////////////////////////////////
        /// Set the callback.
        ////////////////////////////////////////////////////////////
        void set_callback(Callback f);

    protected:

        ////////////////////////////////////////////////////////////
        /// Fire the callback.
        ////////////////////////////////////////////////////////////
        virtual void notify(Event const & event) const;

    private:

        ////////////////////////////////////////////////////////////
        /// The event manager class needs to be able to change the
        /// registers_ field on register or unregister calls.
        ////////////////////////////////////////////////////////////
        friend class EventManager;

        ////////////////////////////////////////////////////////////
        /// Remove the (event_manager, event) pair from registers_.
        ////////////////////////////////////////////////////////////
        void remove(EventManager* event_manager, Event const & event);

        ////////////////////////////////////////////////////////////
        /// Keep track of all events managers where the listener is
        /// registered.
        ////////////////////////////////////////////////////////////
        std::vector<std::pair<EventManager*, Event> > registers_;

        ////////////////////////////////////////////////////////////
        /// The notify callback.
        ////////////////////////////////////////////////////////////
        Callback callback_;

    }; // class Listener

    ////////////////////////////////////////////////////////////
    /// The event manager can receive events and distribute them
    /// to registered listeners.
    ////////////////////////////////////////////////////////////
    class EventManager
    {
    public:

        ////////////////////////////////////////////////////////////
        /// The global event manager.
        ////////////////////////////////////////////////////////////
        static EventManager & global();

        ////////////////////////////////////////////////////////////
        /// The destructor unregisters all listeners.
        ////////////////////////////////////////////////////////////
        ~EventManager();

        ////////////////////////////////////////////////////////////
        /// Register a new listener.
        ////////////////////////////////////////////////////////////
        void register_listener(Listener & listener, Event const & event = "");

        ////////////////////////////////////////////////////////////
        /// Unregister a listener.
        ////////////////////////////////////////////////////////////
        void unregister_listener(Listener & listener, Event const & event = "");

        ////////////////////////////////////////////////////////////
        /// Add a new event to the queue.
        ////////////////////////////////////////////////////////////
        void enqueue(Event const & event);

        ////////////////////////////////////////////////////////////
        /// Add a new event to the queue.
        ////////////////////////////////////////////////////////////
        void enqueue(Event && event);

        ////////////////////////////////////////////////////////////
        /// Broadcast all events to the listeners.
        ////////////////////////////////////////////////////////////
        void dispatch();

        ////////////////////////////////////////////////////////////
        /// Register an event.
        ////////////////////////////////////////////////////////////
        void register_event(Event const & event);

    private:

        ////////////////////////////////////////////////////////////
        /// The listener needs to be able to change the listeners_
        /// field of the event manager.
        ////////////////////////////////////////////////////////////
        friend class Listener;

        ////////////////////////////////////////////////////////////
        /// Remove the (event, listener) pair from listeners_.
        ////////////////////////////////////////////////////////////
        void remove(Listener* listener, Event const & event);

        ////////////////////////////////////////////////////////////
        /// The registered listeners.
        ////////////////////////////////////////////////////////////
        std::map<Event, std::vector<Listener*> > listeners_;

        ////////////////////////////////////////////////////////////
        /// The enqueued events.
        ////////////////////////////////////////////////////////////
        std::queue<Event> event_queue_;

        ////////////////////////////////////////////////////////////
        /// The list with the registered events.
        ////////////////////////////////////////////////////////////
        std::set<Event> registered_events_;

    }; // class EventManager

} // namespace sfe

#endif
