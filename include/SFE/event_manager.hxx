#ifndef SFE_EVENT_MANAGER_HXX
#define SFE_EVENT_MANAGER_HXX

#include <SFE/sfestd.hxx>

#include <functional>
#include <map>
#include <memory>
#include <queue>
#include <set>
#include <vector>

namespace sfe
{
    class EventManager;

    typedef std::string Event;

    ////////////////////////////////////////////////////////////
    /// Event listener that can react to events.
    ////////////////////////////////////////////////////////////
    class SFE_API Listener
    {
    public:

        ////////////////////////////////////////////////////////////
        /// The callback function type.
        ////////////////////////////////////////////////////////////
        typedef std::function<void(Event const&)> Callback;

        ////////////////////////////////////////////////////////////
        /// Create a listener that uses the given callback.
        ////////////////////////////////////////////////////////////
        Listener(Callback f);

        ////////////////////////////////////////////////////////////
        /// Set the callback.
        ////////////////////////////////////////////////////////////
        void set_callback(Callback f);

        ////////////////////////////////////////////////////////////
        /// Fire the callback.
        ////////////////////////////////////////////////////////////
        void notify(Event const& event) const;

    private:

        ////////////////////////////////////////////////////////////
        /// Remove the (event_manager, event) pair from registers_.
        ////////////////////////////////////////////////////////////
        void remove(EventManager* event_manager, Event const& event);

        ////////////////////////////////////////////////////////////
        /// Keep track of all events managers where the listener is
        /// registered.
        ////////////////////////////////////////////////////////////
        std::vector<std::pair<EventManager*, Event>> registers_;

        ////////////////////////////////////////////////////////////
        /// The notify callback.
        ////////////////////////////////////////////////////////////
        Callback callback_;

    }; // class Listener

    ////////////////////////////////////////////////////////////
    /// The event manager can receive events and distribute them
    /// to registered listeners.
    ////////////////////////////////////////////////////////////
    class SFE_API EventManager
    {
    public:

        ////////////////////////////////////////////////////////////
        /// The global event manager.
        ////////////////////////////////////////////////////////////
        static EventManager & global();

        ////////////////////////////////////////////////////////////
        /// Register a new listener to the event and return it.
        ////////////////////////////////////////////////////////////
        std::shared_ptr<Listener> register_listener(Event const & event, Listener::Callback callback);

        ////////////////////////////////////////////////////////////
        /// Add a new event to the queue.
        ////////////////////////////////////////////////////////////
        void enqueue(Event const & event);

        ////////////////////////////////////////////////////////////
        /// Add a new event to the queue.
        ////////////////////////////////////////////////////////////
        void enqueue(Event && event);

        ////////////////////////////////////////////////////////////
        /// Broadcast all events to the listeners.
        ////////////////////////////////////////////////////////////
        void dispatch();

        ////////////////////////////////////////////////////////////
        /// Register an event.
        ////////////////////////////////////////////////////////////
        void register_event(Event const & event);

    private:

        ////////////////////////////////////////////////////////////
        /// The registered listeners.
        ////////////////////////////////////////////////////////////
        std::map<Event, std::vector<std::weak_ptr<Listener>>> listeners_;

        ////////////////////////////////////////////////////////////
        /// The enqueued events.
        ////////////////////////////////////////////////////////////
        std::queue<Event> event_queue_;

        ////////////////////////////////////////////////////////////
        /// The list with the registered events.
        ////////////////////////////////////////////////////////////
        std::set<Event> registered_events_;

    }; // class EventManager

    ////////////////////////////////////////////////////////////
    /// Exception class for all event exceptions.
    ////////////////////////////////////////////////////////////
    DECLARE_EXCEPTION(EventException);

} // namespace sfe

#endif
