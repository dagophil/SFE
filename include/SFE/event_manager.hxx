#ifndef SFE_EVENT_MANAGER_HXX
#define SFE_EVENT_MANAGER_HXX

#include <SFE/sfestd.hxx>
#include <SFE/propagate_const.hxx>

#include <functional>
#include <memory>

namespace sfe
{
    ////////////////////////////////////////////////////////////
    /// The event class is a wrapper around std::string.
    ////////////////////////////////////////////////////////////
    class SFE_API Event
    {
    public:

        ////////////////////////////////////////////////////////////
        /// Create an event with the given name.
        ////////////////////////////////////////////////////////////
        explicit Event(std::string const& name);

        ////////////////////////////////////////////////////////////
        /// Compare the event names.
        ////////////////////////////////////////////////////////////
        bool operator<(Event const& other) const;

        ////////////////////////////////////////////////////////////
        /// Compare the event names.
        ////////////////////////////////////////////////////////////
        bool operator==(Event const& other) const;

    private:

        ////////////////////////////////////////////////////////////
        /// The event name.
        ////////////////////////////////////////////////////////////
        std::string name_;

    };

    ////////////////////////////////////////////////////////////
    /// Event listener that can react to events.
    ////////////////////////////////////////////////////////////
    class SFE_API Listener
    {
    public:

        ////////////////////////////////////////////////////////////
        /// The callback function type.
        ////////////////////////////////////////////////////////////
        typedef std::function<void(Event const&)> Callback;

        ////////////////////////////////////////////////////////////
        /// Create a listener that uses the given callback.
        ////////////////////////////////////////////////////////////
        Listener(Callback const& f);

        ////////////////////////////////////////////////////////////
        /// Set the callback.
        ////////////////////////////////////////////////////////////
        void set_callback(Callback const& f);

        ////////////////////////////////////////////////////////////
        /// Fire the callback.
        ////////////////////////////////////////////////////////////
        void notify(Event const& event) const;

    private:

        ////////////////////////////////////////////////////////////
        /// The notify callback.
        ////////////////////////////////////////////////////////////
        Callback callback_;

    }; // class Listener

    ////////////////////////////////////////////////////////////
    /// The event manager can receive events and distribute them
    /// to registered listeners.
    ////////////////////////////////////////////////////////////
    class SFE_API EventManager
    {
    public:

        ////////////////////////////////////////////////////////////
        /// Default constructor.
        ////////////////////////////////////////////////////////////
        EventManager();

        ////////////////////////////////////////////////////////////
        /// Default destructor.
        ////////////////////////////////////////////////////////////
        ~EventManager();

        ////////////////////////////////////////////////////////////
        /// Disable copy constructor.
        ////////////////////////////////////////////////////////////
        EventManager(EventManager const& other) = delete;

        ////////////////////////////////////////////////////////////
        /// Enable move constructor.
        ////////////////////////////////////////////////////////////
        EventManager(EventManager && other);

        ////////////////////////////////////////////////////////////
        /// Disable copy assignment.
        ////////////////////////////////////////////////////////////
        EventManager & operator=(EventManager const& other) = delete;

        ////////////////////////////////////////////////////////////
        /// Enable move assignment.
        ////////////////////////////////////////////////////////////
        EventManager & operator=(EventManager && other);

        ////////////////////////////////////////////////////////////
        /// Register a new listener to the event and return it.
        ////////////////////////////////////////////////////////////
        std::shared_ptr<Listener> register_listener(
            Event const & event,
            Listener::Callback const& callback
        );

        ////////////////////////////////////////////////////////////
        /// Add a new event to the queue.
        ////////////////////////////////////////////////////////////
        void enqueue(Event const& event);

        ////////////////////////////////////////////////////////////
        /// Broadcast all events to the listeners.
        ////////////////////////////////////////////////////////////
        void dispatch();

        ////////////////////////////////////////////////////////////
        /// Register an event.
        ////////////////////////////////////////////////////////////
        void register_event(Event const & event);

    private:

        class impl;
        sfe::propagate_const<std::unique_ptr<impl>> impl_;

    }; // class EventManager

    ////////////////////////////////////////////////////////////
    /// Exception class for all event exceptions.
    ////////////////////////////////////////////////////////////
    DECLARE_EXCEPTION(EventException);

} // namespace sfe

#endif
