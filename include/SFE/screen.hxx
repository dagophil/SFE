#ifndef SFE_SCREEN_HXX
#define SFE_SCREEN_HXX

#include <SFE/sfestd.hxx>
#include <SFE/game_object.hxx>
#include <SFE/widget.hxx>

#include <memory>
#include <vector>

namespace sfe
{
    class EventManager;
    class Listener;
    class ResourceManager;

    ////////////////////////////////////////////////////////////
    /// A screen holds the gui widgets and the game objects.
    ////////////////////////////////////////////////////////////
    class SFE_API Screen
    {
    public:

        ////////////////////////////////////////////////////////////
        /// Construct a screen with the given game view and the
        /// given managers.
        ////////////////////////////////////////////////////////////
        Screen(
            sf::View game_view,
            std::shared_ptr<EventManager> const& event_manager,
            std::shared_ptr<ResourceManager> const& resource_manager
        );

        ////////////////////////////////////////////////////////////
        /// Virtual default destructor.
        ////////////////////////////////////////////////////////////
        virtual ~Screen();

        ////////////////////////////////////////////////////////////
        /// Update the gui and the game objects.
        ////////////////////////////////////////////////////////////
        void update(sf::RenderWindow const & window, sf::Time elapsed_time);

        ////////////////////////////////////////////////////////////
        /// Render the gui and the game objects.
        ////////////////////////////////////////////////////////////
        void render(sf::RenderTarget & target) const;

        ////////////////////////////////////////////////////////////
        /// Process the user input.
        ////////////////////////////////////////////////////////////
        void process_input(int mouse_x, int mouse_y);

        ////////////////////////////////////////////////////////////
        /// Return the gui widget.
        ////////////////////////////////////////////////////////////
        Widget & get_gui();

        ////////////////////////////////////////////////////////////
        /// Return the gui widget.
        ////////////////////////////////////////////////////////////
        Widget const & get_gui() const;

        ////////////////////////////////////////////////////////////
        /// Add a game object to the screen.
        ////////////////////////////////////////////////////////////
        GameObject* add_game_object(std::unique_ptr<GameObject> obj);

        ////////////////////////////////////////////////////////////
        /// Remove a game object from the screen.
        /// For convenience, the object is returned so it can be
        /// reused.
        ////////////////////////////////////////////////////////////
        std::unique_ptr<GameObject> remove_game_object(GameObject* obj);

        ////////////////////////////////////////////////////////////
        /// Clear all game objects.
        ////////////////////////////////////////////////////////////
        void clear_game_objects();

        ////////////////////////////////////////////////////////////
        /// Return the game view.
        ////////////////////////////////////////////////////////////
        sf::View & get_game_view();

        ////////////////////////////////////////////////////////////
        /// Return the game view.
        ////////////////////////////////////////////////////////////
        sf::View const & get_game_view() const;

        ////////////////////////////////////////////////////////////
        /// Set the game view.
        ////////////////////////////////////////////////////////////
        void set_game_view(sf::View const & view);

        ////////////////////////////////////////////////////////////
        /// Set the event manager.
        ////////////////////////////////////////////////////////////
        std::shared_ptr<EventManager> get_event_manager() const;

        ////////////////////////////////////////////////////////////
        /// Set the resource manager.
        ////////////////////////////////////////////////////////////
        std::shared_ptr<ResourceManager> get_resource_manager() const;

        ////////////////////////////////////////////////////////////
        /// Add an event listener.
        ////////////////////////////////////////////////////////////
        void add_listener(std::shared_ptr<Listener> listener);

        ////////////////////////////////////////////////////////////
        /// Remove all event listeners.
        ////////////////////////////////////////////////////////////
        void clear_listeners();

        ////////////////////////////////////////////////////////////
        /// The initialization function.
        ////////////////////////////////////////////////////////////
        std::function<void()> init_;

        ////////////////////////////////////////////////////////////
        /// The update function.
        ////////////////////////////////////////////////////////////
        std::function<void(sf::Time)> update_;

    private:

        ////////////////////////////////////////////////////////////
        /// The game view.
        ////////////////////////////////////////////////////////////
        sf::View game_view_;

        ////////////////////////////////////////////////////////////
        /// The event manager.
        ////////////////////////////////////////////////////////////
        std::shared_ptr<EventManager> event_manager_;

        ////////////////////////////////////////////////////////////
        /// The resource manager.
        ////////////////////////////////////////////////////////////
        std::shared_ptr<ResourceManager> resource_manager_;

        ////////////////////////////////////////////////////////////
        /// The game objects.
        ////////////////////////////////////////////////////////////
        std::vector<std::unique_ptr<GameObject> > game_objects_;

        ////////////////////////////////////////////////////////////
        /// The gui widget.
        ////////////////////////////////////////////////////////////
        Widget gui_;

        ////////////////////////////////////////////////////////////
        /// A container for event listeners.
        ////////////////////////////////////////////////////////////
        std::vector<std::shared_ptr<Listener> > listeners_;

    }; // class Screen

    ////////////////////////////////////////////////////////////
    /// Exception class for all screen exceptions.
    ////////////////////////////////////////////////////////////
    DECLARE_EXCEPTION(ScreenException);

} // namespace sfe

#endif
