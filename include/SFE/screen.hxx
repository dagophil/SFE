#ifndef SFE_SCREEN_HXX
#define SFE_SCREEN_HXX

#include <vector>

#include "game_object.hxx"
#include "widget.hxx"
#include "event_manager.hxx"

namespace sfe
{
    ////////////////////////////////////////////////////////////
    /// A screen holds the gui widgets and the game objects.
    ////////////////////////////////////////////////////////////
    class Screen
    {
    public:

        ////////////////////////////////////////////////////////////
        /// Construct a screen with the given game view.
        ////////////////////////////////////////////////////////////
        Screen(sf::View game_view);

        ////////////////////////////////////////////////////////////
        /// Virtual default destructor.
        ////////////////////////////////////////////////////////////
        virtual ~Screen() = default;

        ////////////////////////////////////////////////////////////
        /// Update the gui and the game objects.
        ////////////////////////////////////////////////////////////
        void update(sf::RenderWindow const & window, sf::Time elapsed_time);

        ////////////////////////////////////////////////////////////
        /// Render the gui and the game objects.
        ////////////////////////////////////////////////////////////
        void render(sf::RenderTarget & target) const;

        ////////////////////////////////////////////////////////////
        /// Process the user input.
        ////////////////////////////////////////////////////////////
        void process_input(int mouse_x, int mouse_y);

        ////////////////////////////////////////////////////////////
        /// Return the gui widget.
        ////////////////////////////////////////////////////////////
        Widget & get_gui();

        ////////////////////////////////////////////////////////////
        /// Return the gui widget.
        ////////////////////////////////////////////////////////////
        Widget const & get_gui() const;

        ////////////////////////////////////////////////////////////
        /// Add a game object to the screen.
        ////////////////////////////////////////////////////////////
        GameObject* add_game_object(std::unique_ptr<GameObject> obj);

        ////////////////////////////////////////////////////////////
        /// Remove a game object from the screen.
        /// For convenience, the object is returned so it can be
        /// reused.
        ////////////////////////////////////////////////////////////
        std::unique_ptr<GameObject> remove_game_object(GameObject* obj);

        ////////////////////////////////////////////////////////////
        /// Clear all game objects.
        ////////////////////////////////////////////////////////////
        void clear_game_objects();

        ////////////////////////////////////////////////////////////
        /// Return the game view.
        ////////////////////////////////////////////////////////////
        sf::View & get_game_view();

        ////////////////////////////////////////////////////////////
        /// Return the game view.
        ////////////////////////////////////////////////////////////
        sf::View const & get_game_view() const;

        ////////////////////////////////////////////////////////////
        /// Set the game view.
        ////////////////////////////////////////////////////////////
        void set_game_view(sf::View const & view);

        ////////////////////////////////////////////////////////////
        /// Add an event listener.
        ////////////////////////////////////////////////////////////
        void add_listener(std::unique_ptr<Listener> listener);

        ////////////////////////////////////////////////////////////
        /// Create a listener with the given callback and register
        /// it to all events in args.
        ////////////////////////////////////////////////////////////
        template <typename... Args>
        void create_and_register_listener(Listener::Callback f, Args && ... args);

        ////////////////////////////////////////////////////////////
        /// Remove all event listeners.
        ////////////////////////////////////////////////////////////
        void clear_listeners();

        ////////////////////////////////////////////////////////////
        /// The initialization function.
        ////////////////////////////////////////////////////////////
        std::function<void()> init_;

        ////////////////////////////////////////////////////////////
        /// The update function.
        ////////////////////////////////////////////////////////////
        std::function<void(sf::Time)> update_;

    private:

        ////////////////////////////////////////////////////////////
        /// The game view.
        ////////////////////////////////////////////////////////////
        sf::View game_view_;

        ////////////////////////////////////////////////////////////
        /// The game objects.
        ////////////////////////////////////////////////////////////
        std::vector<std::unique_ptr<GameObject> > game_objects_;

        ////////////////////////////////////////////////////////////
        /// The gui widget.
        ////////////////////////////////////////////////////////////
        Widget gui_;

        ////////////////////////////////////////////////////////////
        /// A container for event listeners.
        ////////////////////////////////////////////////////////////
        std::vector<std::unique_ptr<Listener> > listeners_;

    }; // class Screen

    template <typename... Args>
    inline void Screen::create_and_register_listener(Listener::Callback f, Args && ... args)
    {
        auto listener = std::make_unique<Listener>(f);
        std::vector<Event> const events = { args... };
        for (auto const & ev : events)
            EventManager::global().register_listener(*listener, ev);
        add_listener(std::move(listener));
    }

} // namespace sfe

#endif
