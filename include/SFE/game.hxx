#ifndef SFE_GAME_HXX
#define SFE_GAME_HXX

#include <SFE/sfestd.hxx>
#include <SFE/screen.hxx>

#include <SFML/Graphics.hpp>

namespace sfe
{
    class ResourceManager;

    ////////////////////////////////////////////////////////////
    /// Base class for all game applications.
    ////////////////////////////////////////////////////////////
    class SFE_API Game
    {
    public:

        ////////////////////////////////////////////////////////////
        /// Initialize the game.
        ////////////////////////////////////////////////////////////
        Game(unsigned int width, unsigned int height, std::string const & title, sf::Uint32 style = sf::Style::Default);

        ////////////////////////////////////////////////////////////
        /// Run the game loop.
        ////////////////////////////////////////////////////////////
        void run();

        ////////////////////////////////////////////////////////////
        /// Return the render window.
        ////////////////////////////////////////////////////////////
        sf::RenderWindow & get_window();

        ////////////////////////////////////////////////////////////
        /// Return the render window.
        ////////////////////////////////////////////////////////////
        sf::RenderWindow const & get_window() const;

        ////////////////////////////////////////////////////////////
        /// Load the given screen.
        ////////////////////////////////////////////////////////////
        void load_screen(std::unique_ptr<Screen> new_screen, bool change_to_default_view = true);

        ////////////////////////////////////////////////////////////
        /// Returns the resource manager.
        ////////////////////////////////////////////////////////////
        std::shared_ptr<ResourceManager> get_resource_manager() const;

    private:

        ////////////////////////////////////////////////////////////
        /// The concrete initialization of the derived class, which
        /// is called at the beginning of run().
        ////////////////////////////////////////////////////////////
        virtual void init_impl() = 0;

        ////////////////////////////////////////////////////////////
        /// The concrete update of the derived class, which is
        /// called once per frame.
        ////////////////////////////////////////////////////////////
        virtual void update_impl(sf::Time const& elapsed_time) = 0;

        ////////////////////////////////////////////////////////////
        /// The current screen.
        ////////////////////////////////////////////////////////////
        std::unique_ptr<Screen> screen_;

        ////////////////////////////////////////////////////////////
        /// The new requested screen. The pointer is only valid
        /// between a call to load_screen() and the next frame.
        ////////////////////////////////////////////////////////////
        std::unique_ptr<Screen> requested_screen_;

        ////////////////////////////////////////////////////////////
        /// The render window.
        ////////////////////////////////////////////////////////////
        sf::RenderWindow window_;

        ////////////////////////////////////////////////////////////
        /// The clock that measures the elapsed time per frame.
        ////////////////////////////////////////////////////////////
        sf::Clock clock_;

        ////////////////////////////////////////////////////////////
        /// The resource manager.
        ////////////////////////////////////////////////////////////
        std::shared_ptr<ResourceManager> resource_manager_;

    }; // class Game

    ////////////////////////////////////////////////////////////
    /// Exception class for all game exceptions.
    ////////////////////////////////////////////////////////////
    DECLARE_EXCEPTION(GameException);

} // namespace sfe

#endif
