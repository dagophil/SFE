#ifndef SFE_GAME_OBJECT_HXX
#define SFE_GAME_OBJECT_HXX

#include <SFE/sfestd.hxx>

#include <SFML/Graphics.hpp>

#include <memory>

namespace sfe
{
    class ResourceManager;

    ////////////////////////////////////////////////////////////
    /// The base class for all game objects.
    ////////////////////////////////////////////////////////////
    class SFE_API GameObject
    {
    public:

        ////////////////////////////////////////////////////////////
        /// The default constructor creates the game object at
        /// (0, 0) with size (1, 1).
        ////////////////////////////////////////////////////////////
        GameObject();

        ////////////////////////////////////////////////////////////
        /// Virtual default destructor.
        ////////////////////////////////////////////////////////////
        virtual ~GameObject() = default;

        ////////////////////////////////////////////////////////////
        /// Update the game object.
        ////////////////////////////////////////////////////////////
        virtual void update(sf::Time elapsed_time);

        ////////////////////////////////////////////////////////////
        /// Render the game object.
        ////////////////////////////////////////////////////////////
        void render(sf::RenderTarget & target) const;

        ////////////////////////////////////////////////////////////
        /// Return the position.
        ////////////////////////////////////////////////////////////
        sf::Vector2f const & get_position() const;

        ////////////////////////////////////////////////////////////
        /// Set the position.
        ////////////////////////////////////////////////////////////
        void set_position(sf::Vector2f const & position);

        ////////////////////////////////////////////////////////////
        /// Set the position.
        ////////////////////////////////////////////////////////////
        void set_position(float x, float y);

        ////////////////////////////////////////////////////////////
        /// Return the size.
        ////////////////////////////////////////////////////////////
        sf::Vector2f const & get_size() const;

        ////////////////////////////////////////////////////////////
        /// Set the size.
        ////////////////////////////////////////////////////////////
        void set_size(sf::Vector2f const & size);

        ////////////////////////////////////////////////////////////
        /// Set the size.
        ////////////////////////////////////////////////////////////
        void set_size(float width, float height);

        ////////////////////////////////////////////////////////////
        /// Return the rotation.
        ////////////////////////////////////////////////////////////
        float get_rotation() const;

        ////////////////////////////////////////////////////////////
        /// Set the rotation.
        ////////////////////////////////////////////////////////////
        void set_rotation(float angle);

        ////////////////////////////////////////////////////////////
        /// Increase the rotation by the given value.
        ////////////////////////////////////////////////////////////
        void rotate(float angle);

        ////////////////////////////////////////////////////////////
        /// Return the z-index.
        ////////////////////////////////////////////////////////////
        int get_z_index() const;

        ////////////////////////////////////////////////////////////
        /// Set the z-index.
        ////////////////////////////////////////////////////////////
        void set_z_index(int z_index);

        ////////////////////////////////////////////////////////////
        /// Return whether the object will be rendered.
        ////////////////////////////////////////////////////////////
        bool get_visible() const;

        ////////////////////////////////////////////////////////////
        /// Set whether the object will be rendered.
        ////////////////////////////////////////////////////////////
        void set_visible(bool b);

        ////////////////////////////////////////////////////////////
        /// Return the resource manager.
        ////////////////////////////////////////////////////////////
        std::shared_ptr<ResourceManager> get_resource_manager() const;

        ////////////////////////////////////////////////////////////
        /// Sets the resource manager.
        ////////////////////////////////////////////////////////////
        void set_resource_manager(std::shared_ptr<ResourceManager> const& resource_manager);

    protected:

        ////////////////////////////////////////////////////////////
        /// The concrete render method.
        ////////////////////////////////////////////////////////////
        virtual void render_impl(sf::RenderTarget & target) const = 0;
        
    private:

        ////////////////////////////////////////////////////////////
        /// Position of the game object.
        ////////////////////////////////////////////////////////////
        sf::Vector2f position_;

        ////////////////////////////////////////////////////////////
        /// Size of the game object.
        ////////////////////////////////////////////////////////////
        sf::Vector2f size_;

        ////////////////////////////////////////////////////////////
        /// Rotation of the game object.
        ////////////////////////////////////////////////////////////
        float rotation_;

        ////////////////////////////////////////////////////////////
        /// The z-index.
        ////////////////////////////////////////////////////////////
        int z_index_;

        ////////////////////////////////////////////////////////////
        /// Whether the object should be rendered.
        ////////////////////////////////////////////////////////////
        bool visible_;

        ////////////////////////////////////////////////////////////
        /// The resource manager.
        ////////////////////////////////////////////////////////////
        std::shared_ptr<ResourceManager> resource_manager_;

    }; // class GameObject

    ////////////////////////////////////////////////////////////
    /// A game object that displays an image.
    ////////////////////////////////////////////////////////////
    class SFE_API ImageObject : public GameObject
    {
    public:

        ////////////////////////////////////////////////////////////
        /// Create an object from the given image.
        ////////////////////////////////////////////////////////////
        ImageObject(std::string const & filename);

        ////////////////////////////////////////////////////////////
        /// Return the filename.
        ////////////////////////////////////////////////////////////
        std::string const & get_filename() const;

        ////////////////////////////////////////////////////////////
        /// Set the filename.
        ////////////////////////////////////////////////////////////
        void set_filename(std::string const & filename);

        ////////////////////////////////////////////////////////////
        /// Return the mirror-x property.
        ////////////////////////////////////////////////////////////
        bool get_mirror_x() const;

        ////////////////////////////////////////////////////////////
        /// Set the mirror-x property.
        ////////////////////////////////////////////////////////////
        void set_mirror_x(bool b);

        ////////////////////////////////////////////////////////////
        /// Return the mirror-y property.
        ////////////////////////////////////////////////////////////
        bool get_mirror_y() const;

        ////////////////////////////////////////////////////////////
        /// Set the mirror-y property.
        ////////////////////////////////////////////////////////////
        void set_mirror_y(bool b);

    protected:

        ////////////////////////////////////////////////////////////
        /// Draw the image.
        ////////////////////////////////////////////////////////////
        virtual void render_impl(sf::RenderTarget & target) const override;

    private:

        ////////////////////////////////////////////////////////////
        /// The image filename.
        ////////////////////////////////////////////////////////////
        std::string filename_;

        ////////////////////////////////////////////////////////////
        /// Mirror the image in x-direction.
        ////////////////////////////////////////////////////////////
        bool mirror_x_;

        ////////////////////////////////////////////////////////////
        /// Mirror the image in y-direction.
        ////////////////////////////////////////////////////////////
        bool mirror_y_;

    }; // class ImageObject

} // namespace sfe

#endif
